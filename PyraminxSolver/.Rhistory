c(-2,0,-2*isq3),
c(-1,0,-1*isq3),
c(0,0,-2*isq3),
c(1,0,-1*isq3),
c(2,0,-2*isq3),
c(-1,0,isq3),
c(0,0,2*isq3),
c(1,0,isq3),
c(0,0,4*isq3)
)+disp1;
level1
disp2 = c(0,4*isq3,-2*isq3);
level2 = rbind(
c(-1,0,isq3),
c(0,0,2*isq3),
c(1,0,isq3),
c(0,0,4*isq3)) + disp2;
level2;
disp3 = c(0,8*isq3,-4*isq3)
level3=rbind(c(0,0,4*isq3)+disp3)
level3;
tetra = rbind(level1,level2,level3);
tetra;
tetrahedron<-function(p) {
list(x=p[,1],y=p[,2],p=p[,3]);
}
library(plot3D);
dx=1*1.23409;
isq3=-1/sqrt(3)*dx;
disp1=c(0,0,0);
level1 = rbind(
c(-2*dx,0,-2*isq3),
c(-1*dx,0,-1*isq3),
c(0*dx,0,-2*isq3),
c(1*dx,0,-1*isq3),
c(2*dx,0,-2*isq3),
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)
)+disp1;
level1
disp2 = c(0,4*isq3,-2*isq3);
level2 = rbind(
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)) + disp2;
level2;
disp3 = c(0,8*isq3,-4*isq3)
level3=rbind(c(0*dx,0,4*isq3)+disp3)
level3;
tetra = rbind(level1,level2,level3);
tetra;
tetrahedron<-function(p) {
list(x=p[,1],y=p[,2],p=p[,3]);
}
library(plot3D);
-2*isq3
dx=1*1.23409;
isq3=-1/sqrt(3)*dx;
disp1=c(0,-2*isq3,0);
level1 = rbind(
c(-2*dx,0,-2*isq3),
c(-1*dx,0,-1*isq3),
c(0*dx,0,-2*isq3),
c(1*dx,0,-1*isq3),
c(2*dx,0,-2*isq3),
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)
)+disp1;
level1
dx=1*1.23409;
isq3=-1/sqrt(3)*dx;
disp1=c(0,-2*isq3,0);
level1 = rbind(
c(-2*dx,0,-2*isq3),
c(-1*dx,0,-1*isq3),
c(0*dx,0,-2*isq3),
c(1*dx,0,-1*isq3),
c(2*dx,0,-2*isq3),
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)
)+disp1;
level1
disp2 = c(0,2*isq3,-2*isq3);
level2 = rbind(
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)) + disp2;
level2;
disp3 = c(0,6*isq3,-4*isq3)
level3=rbind(c(0*dx,0,4*isq3)+disp3)0
dx=1*1.23409;
isq3=-1/sqrt(3)*dx;
disp1=c(0,-2*isq3,0);
level1 = rbind(
c(-2*dx,0,-2*isq3),
c(-1*dx,0,-1*isq3),
c(0*dx,0,-2*isq3),
c(1*dx,0,-1*isq3),
c(2*dx,0,-2*isq3),
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)
)+disp1;
level1
disp2 = c(0,2*isq3,-2*isq3);
level2 = rbind(
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)) + disp2;
level2;
disp3 = c(0,6*isq3,-4*isq3)
level3=rbind(c(0*dx,0,4*isq3)+disp3)
level3;
dx=1*1.23409;
isq3=1/sqrt(3)*dx;
disp1=c(0,-2*isq3,0);
level1 = rbind(
c(-2*dx,0,-2*isq3),
c(-1*dx,0,-1*isq3),
c(0*dx,0,-2*isq3),
c(1*dx,0,-1*isq3),
c(2*dx,0,-2*isq3),
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)
)+disp1;
level1
dx=1*1.23409;
isq3=-1/sqrt(3)*dx;
disp1=c(0,-2/sqrt(3),0);
level1 = rbind(
c(-2*dx,0,-2*isq3),
c(-1*dx,0,-1*isq3),
c(0*dx,0,-2*isq3),
c(1*dx,0,-1*isq3),
c(2*dx,0,-2*isq3),
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)
)+disp1;
level1
disp1
level1 = rbind(
c(-2*dx,0,-2*isq3),
c(-1*dx,0,-1*isq3),
c(0*dx,0,-2*isq3),
c(1*dx,0,-1*isq3),
c(2*dx,0,-2*isq3),
c(-1*dx,0,isq3),
c(0*dx,0,2*isq3),
c(1*dx,0,isq3),
c(0*dx,0,4*isq3)
)
level1
level1+disp1
disp1
rep(disp1,9)
dx=1*1.23409;
isq3=-1/sqrt(3)*dx;
disp1=c(0,-2/sqrt(3),0);
level1 = rbind(
c(-2*dx,0,-2*isq3)+disp1,
c(-1*dx,0,-1*isq3)+disp1,
c(0*dx,0,-2*isq3)+disp1,
c(1*dx,0,-1*isq3)+disp1,
c(2*dx,0,-2*isq3)+disp1,
c(-1*dx,0,isq3)+disp1,
c(0*dx,0,2*isq3)+disp1,
c(1*dx,0,isq3)+disp1,
c(0*dx,0,4*isq3)+disp1
);
level1
disp2 = c(0,2*isq3,-2*isq3);
level2 = rbind(
c(-1*dx,0,isq3)+disp2,
c(0*dx,0,2*isq3)+disp2,
c(1*dx,0,isq3)+disp2,
c(0*dx,0,4*isq3)+disp2);
level2;
disp3 = c(0,6*isq3,-4*isq3)
level3=rbind(c(0*dx,0,4*isq3)+disp3)
level3;
disp2 = c(0,2*isq3,-2*isq3)+disp1;
level2 = rbind(
c(-1*dx,0,isq3)+disp2,
c(0*dx,0,2*isq3)+disp2,
c(1*dx,0,isq3)+disp2,
c(0*dx,0,4*isq3)+disp2);
level2;
disp2 = c(0,-2*isq3,-2*isq3)+disp1;
level2 = rbind(
c(-1*dx,0,isq3)+disp2,
c(0*dx,0,2*isq3)+disp2,
c(1*dx,0,isq3)+disp2,
c(0*dx,0,4*isq3)+disp2);
level2;
knitr::opts_chunk$set(echo = TRUE)
disp2 = c(0,-2*isq3,-2*isq3)+disp1;
disp2=c(0,0,0)
level2 = rbind(
c(-1*dx,0,isq3)+disp2,
c(0*dx,0,2*isq3)+disp2,
c(1*dx,0,isq3)+disp2,
c(0*dx,0,4*isq3)+disp2);
level2;
locs=list(c(-1.23409,0, -0.7125022),
(0.00000,  0, -1.4250044),
(1.23409,  0, -0.7125022)
(0.00000,  0, -2.8500088));
locs=list(c(-1.23409,0, -0.7125022),
c(0.00000,  0, -1.4250044),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088));
locs
lapply(locs, function(x, lapply(list(v1,v2,v3,v4), function(y) {y+x;})));
list(v1,v2,v3,v4)
locs=list(c(-1.23409,0, -0.7125022),
c(0.00000,  0, -1.4250044),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088));
lapply(locs, function(x, function(x) lapply(list(v1,v2,v3,v4), function(y) {y+x;})));
locs=list(c(-1.23409,0, -0.7125022),
c(0.00000,  0, -1.4250044),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088));
lapply(locs,  function(x) lapply(list(v1,v2,v3,v4), function(y) {y+x;})));
lapply(locs,  function(x) { lapply(list(v1,v2,v3,v4), function(y) {y+x;});});
cshape = rbind(vor[[1]][[1]],vor[[2]][[1]],vor[[3]][[1]],
vor[[1]][[4]],vor[[2]][[4]],vor[[3]][[4]]);
vor=lapply(locs,  function(x) { lapply(list(v1,v2,v3,v4), function(y) {y+x;});});
cshape = rbind(vor[[1]][[1]],vor[[2]][[1]],vor[[3]][[1]],
vor[[1]][[4]],vor[[2]][[4]],vor[[3]][[4]]);
cshape
cc = apply(cshape,2,mean)
cc
cshape-cc
apply(cshape-cc,2,mean)
cshape-cccshape%-%cc
cshape%-%cc
reshape(rep(cc,nrow(cshape)),dim(nrow(cshape),3))
reshape(rep(cc,nrow(cshape)),6,3)
reshape(rep(cc,nrow(cshape)),"wide")
help(reshape)
rep
cc
rep(cc,6)
chase-rep(cc,6)
cshape-rep(cc,6)
apply(cshape-rep(cc,6),2,mean)
cshape
rep(c(1,2,3),each=3)
rep(c(1,2,3),each=3,time=2)
dr=6; df <- data.frame(rep(cc[1],nr),rep(cc[2],nr), rep(cc[3],nr))
nr=6; df <- data.frame(rep(cc[1],nr),rep(cc[2],nr), rep(cc[3],nr))
df
cshape-df
locs=list(c(-1.23409,0, -0.7125022),
c(0.00000,  0, -1.4250044),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088));
vor=lapply(locs,  function(x) { lapply(list(v1,v2,v3,v4), function(y) {y+x;});});
cshape = rbind(vor[[1]][[1]],vor[[2]][[1]],vor[[3]][[1]],
vor[[1]][[4]],vor[[2]][[4]],vor[[3]][[4]]);
cc = apply(cshape,2,mean)
nr=6; df <- data.frame(rep(cc[1],nr),rep(cc[2],nr), rep(cc[3],nr));
connectingshape = cc-df; names(connectingshape) = c("x","y","z");
connectingshape
mean(connectingshape)
apply(connectingshape,2,mean)
apply(connectingshape,1,mean)
apply(connectingshape,2,mean)
apply(connectingshape,2,sum)
connectingshape
cshape
df
cshape-df
cshape = matrix(rbind(vor[[1]][[1]],vor[[2]][[1]],vor[[3]][[1]],
vor[[1]][[4]],vor[[2]][[4]],vor[[3]][[4]]))
cshape
cshape = as.matrix(rbind(vor[[1]][[1]],vor[[2]][[1]],vor[[3]][[1]],
vor[[1]][[4]],vor[[2]][[4]],vor[[3]][[4]]));
cshape
cc = apply(cshape,2,mean)
cc
df-cc
cc
cshape
cshape - df
locs=list(c(-1.23409,0, -0.7125022),
c(0.00000,  0, -1.4250044),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088));
vor=lapply(locs,  function(x) { lapply(list(v1,v2,v3,v4), function(y) {y+x;});});
cshape = as.matrix(rbind(vor[[1]][[1]],vor[[2]][[1]],vor[[3]][[1]],
vor[[1]][[4]],vor[[2]][[4]],vor[[3]][[4]]));
cc = apply(cshape,2,mean)
nr=6; df <- data.frame(rep(cc[1],nr),rep(cc[2],nr), rep(cc[3],nr));
connectingshape = cshape-df; names(connectingshape) = c("x","y","z");
locs=list(c(-1.23409,0, -0.7125022),
c(0.00000,  0, -1.4250044),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088));
vor=lapply(locs,  function(x) { lapply(list(v1,v2,v3,v4), function(y) {y+x;});});
cshape = as.matrix(rbind(vor[[1]][[1]],vor[[2]][[1]],vor[[3]][[1]],
vor[[1]][[4]],vor[[2]][[4]],vor[[3]][[4]]));
cc = apply(cshape,2,mean)
nr=6; df <- data.frame(rep(cc[1],nr),rep(cc[2],nr), rep(cc[3],nr));
connectingshape = cshape-df; names(connectingshape) = c("x","y","z");
connectingshape
apply(connectingshape, 2,mean)
locs=list(c(-1.23409,0, -0.7125022),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088),
c(0.0, 1.154701, -0.7125022*2 )
);
locs
locs=list(c(-1.23409,0, -0.7125022),
c(1.23409,  0, -0.7125022),
c(0.00000,  0, -2.8500088),
c(0.0, 1.154701, -0.7125022*2 )
);
vor=lapply(locs,  function(x) { lapply(list(v1,v2,v3,v4), function(y) {y+x;});});
cshape = as.matrix(rbind(vor[[1]][[1]],vor[[2]][[2]],vor[[3]][[3]],
vor[[4]][[1]],vor[[4]][[2]],vor[[4]][[3]]));
cc = apply(cshape,2,mean)
nr=6; df <- data.frame(rep(cc[1],nr),rep(cc[2],nr), rep(cc[3],nr));
connectingshape = cshape-df; names(connectingshape) = c("x","y","z");
connectingshape
knitr::opts_chunk$set(echo = TRUE)
setwd("C:\\Users\\sojba\\Source\\Repos\\PyraminxSolver\\PyraminxSolver")
source('transformation.R')
source('transformation.R')
pyra = pyranomix("dddddddddffffffffflllllllllrrrrrrrrr");
#drawPyra(cube)
#ucube = rotate(cube,"U"); drawPyra(ucube);
triangleWithLabel<-function(p0,p1,p2,col="",label="") {
x=c(p0[1],p1[1],p2[1]);
y=c(p0[2],p1[2],p2[2]);
polygon(x,y,col=col); #3
cx=mean(x);
cy=mean(y);
text(cx,cy,label,cex=0.5);
}
drawFace<-function(cx,cy,h,trans,faces,labels) {
colr = sapply(faces, function(x) colordic[[x]])
op0 = c(cx,cy);
op3 = c(cx+h,cy);
op9 = c(cx+0.5*h, cy + h);
lout = trans(op0,op3,op9);
p0=lout[[1]];
p3=lout[[2]];
p9=lout[[3]];
p1 = (2/3)*p0 + (1/3)*p3;
p2 = (1/3)*p0 + (2/3)*p3;
p4 = (2/3)*p0 + (1/3)*p9;
p7 = (1/3)*p0 + (2/3)*p9;
p8 = (2/3)*p9 + (1/3)*p3;
p6 = (1/3)*p9 + (2/3)*p3;
p5 = (1/2)*p2 + (1/2)*p7;
triangleWithLabel(p0,p1,p4,col=colr[1],label=labels[1]);
triangleWithLabel(p1,p4,p5,col=colr[2],label=labels[2]);
triangleWithLabel(p1,p5,p2,col=colr[3],label=labels[3]);
triangleWithLabel(p5,p2,p6,col=colr[4],label=labels[4]);
triangleWithLabel(p2,p6,p3,col=colr[5],label=labels[5]);
triangleWithLabel(p4,p5,p7,col=colr[6],label=labels[6]);
triangleWithLabel(p5,p7,p8,col=colr[7],label=labels[7]);
triangleWithLabel(p5,p8,p6,col=colr[8],label=labels[8]);
triangleWithLabel(p7,p8,p9,col=colr[9],label=labels[9]);
}
trans1 <- function(p0,p3,p9) {
np0 = p0 + (1/6)*(p3-p0)+(1/6)*(p9-p0);
np3 = p3;
np9 = p9;
list(np0,np3,np9);
}
trans2 <- function(p0,p3,p9) {
np0 = p0;
np3 = p3;
np9 = p0 + (1/6)*(p3-p0)+(1/6)*(p9-p0);
list(np0,np3,np9);
}
trans3 <- function(p0,p3,p9) {
np0 = p0;
np3 = p0 + (1/6)*(p3-p0)+(1/6)*(p9-p0);
np9 = p9;
list(np0,np3,np9);
}
source('transformation.R')
pyra = pyranomix("dddddddddffffffffflllllllllrrrrrrrrr");
#drawPyra(cube)
#ucube = rotate(cube,"U"); drawPyra(ucube);
drawPyra<-function(pyra,label="") {
centerfaces = pyra[c(9:17)+1];
leftfaces = pyra[c(18:26)+1];
downfaces = pyra[c(0:8)+1];
plot(c(-0.3,1.3),c(0,1.05), type="n",ylab="", xaxt='n', yaxt='n',ann=FALSE);
drawFace(0,0,1,trans1,centerfaces,labels=c(9:17));
drawFace(0,0,1,trans3,leftfaces,labels=c(18:26));
drawFace(0,0,1,trans2,downfaces,labels=c(0:8));
text(0.2,1,label)
}
drawPyra(pyra,"Pyraminx");
drawPyra<-function(pyra,label="") {
centerfaces = pyra[c(9:17)+1];
leftfaces = pyra[c(18:26)+1];
downfaces = pyra[c(8,6,5,1,0,7,3,2,4)+1];
plot(c(-0.3,1.3),c(0,1.05), type="n",ylab="", xaxt='n', yaxt='n',ann=FALSE);
drawFace(0,0,1,trans1,centerfaces,labels=c(9:17));
drawFace(0,0,1,trans3,leftfaces,labels=c(18:26));
drawFace(0,0,1,trans2,downfaces,labels=c(0:8));
text(0.2,1,label)
}
drawPyra(pyra,"Pyraminx");
drawPyra<-function(pyra,label="") {
centerfaces = pyra[c(9:17)+1];
leftfaces = pyra[c(18:26)+1];
downfaces = pyra[c(8,6,5,1,0,7,3,2,4)+1];
plot(c(-0.3,1.3),c(0,1.05), type="n",ylab="", xaxt='n', yaxt='n',ann=FALSE);
drawFace(0,0,1,trans1,centerfaces,labels=c(9:17));
drawFace(0,0,1,trans3,leftfaces,labels=c(18:26));
drawFace(0,0,1,trans2,downfaces,labels=c(8,6,5,1,0,7,3,2,4));
text(0.2,1,label)
}
drawPyra(pyra,"Pyraminx");
upyra = rotate(pyra,"U"); drawPyra(upyra,label="U");
rpyra = rotate(pyra,"R"); drawPyra(rpyra,label="R");
lpyra = rotate(pyra,"L"); drawPyra(lpyra,label="L");
fpyra = rotate(pyra,"F"); drawPyra(fpyra,label="F");
upyra = rotate(pyra,"D"); drawPyra(upyra,label="U");
rpyra = rotate(pyra,"R"); drawPyra(rpyra,label="R");
lpyra = rotate(pyra,"L"); drawPyra(lpyra,label="L");
fpyra = rotate(pyra,"F"); drawPyra(fpyra,label="F");
upyra = rotate(pyra,"D"); drawPyra(upyra,label="D");
rpyra = rotate(pyra,"R"); drawPyra(rpyra,label="R");
lpyra = rotate(pyra,"L"); drawPyra(lpyra,label="L");
fpyra = rotate(pyra,"F"); drawPyra(fpyra,label="F");
c(9,17,13)
rev(c(9,17,13))
source('transformation.R')
pyra = pyranomix("dddddddddffffffffflllllllllrrrrrrrrr");
#drawPyra(cube)
#ucube = rotate(cube,"U"); drawPyra(ucube);
upyra = rotate(pyra,"D"); drawPyra(upyra,label="D");
rpyra = rotate(pyra,"R"); drawPyra(rpyra,label="R");
lpyra = rotate(pyra,"L"); drawPyra(lpyra,label="L");
fpyra = rotate(pyra,"F"); drawPyra(fpyra,label="F");
pyrat0 = rotate(pyra,"l"); drawPyra(pyrat0,label="l");
pyrat9 = rotate(pyra,"f"); drawPyra(pyrat9,label="f");
pyrat13 = rotate(pyra,"r"); drawPyra(pyrat13,label="r");
pyrat17 = rotate(pyra,"u"); drawPyra(pyrat17,label="u");
pyrat0 = rotate(pyra,"l"); drawPyra(pyrat0,label="l");
pyrat9 = rotate(pyra,"b"); drawPyra(pyrat9,label="b");
pyrat13 = rotate(pyra,"r"); drawPyra(pyrat13,label="r");
pyrat17 = rotate(pyra,"u"); drawPyra(pyrat17,label="u");
upyra = rotate(pyra,"D"); drawPyra(upyra,label="D");
rpyra = rotate(pyra,"R"); drawPyra(rpyra,label="R");
lpyra = rotate(pyra,"L"); drawPyra(lpyra,label="L");
fpyra = rotate(pyra,"F"); drawPyra(fpyra,label="F");
setwd("C:/Users/sojba/Source/Repos/PyraminxSolver/PyraminxSolver")
source('transformation.R')
pyra = pyranomix("dddddddddffffffffflllllllllrrrrrrrrr");
#drawPyra(cube)
#ucube = rotate(cube,"U"); drawPyra(ucube);
upyra = rotate(pyra,"D"); drawPyra(upyra,label="D");
rpyra = rotate(pyra,"R"); drawPyra(rpyra,label="R");
lpyra = rotate(pyra,"L"); drawPyra(lpyra,label="L");
fpyra = rotate(pyra,"F"); drawPyra(fpyra,label="F");
pyrat0 = rotate(pyra,"l"); drawPyra(pyrat0,label="l");
pyrat9 = rotate(pyra,"b"); drawPyra(pyrat9,label="b");
pyrat13 = rotate(pyra,"r"); drawPyra(pyrat13,label="r");
pyrat17 = rotate(pyra,"u"); drawPyra(pyrat17,label="u");
set.seed(5);
shuffled=shuffle_pyra(pyra,n=20);
drawPyra(shuffled, label="shuffled (n=20)");
sol="";
matchSmallTip<-function(pyra,tipname) {
tipNo = list("l"=0,"r"=13,"f"=9,"u"=17);
tipnamereverse = paste0(tipname,"'");
center = tip2center[[tipname]];
tipTurned=pyra[tble[tipname,tipNo[[tipname]]+1]+1];
tipTurnedReverse=pyra[tble[tipnamereverse,tipNo[[tipname]]+1]+1];
if (tipTurned==pyra[center+1]) {
npyra = rotate(pyra, tipname);
sol<<-paste(sol,tipname,collapse=" ");
} else if (tipTurnedReverse == pyra[center+1]) {
npyra = rotate(pyra, tipnamereverse);
sol<<-paste(sol,tipnamereverse,collapse=" ");
} else {
npyra = pyra;
}
return(npyra);
}
drawPyra(shuffled)
pyra1 = matchSmallTip(shuffled, "l");
drawPyra(pyra1, label="l is fixed.");
pyra2 = matchSmallTip(pyra1, "f");
drawPyra(shuffled)
pyra1 = matchSmallTip(shuffled, "l");
drawPyra(pyra1, label="l is fixed.");
pyra2 = matchSmallTip(pyra1, "b");
